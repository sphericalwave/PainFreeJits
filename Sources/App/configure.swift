import Fluent
import FluentSQLiteDriver
import Vapor
import Leaf

// Called before your application initializes.
public func configure(_ app: Application) throws
{
    // Serves files from `Public/` directory
    app.middleware.use(FileMiddleware(publicDirectory: app.directory.publicDirectory))
    
    // Configure Leaf
    app.views.use(.leaf)
    app.leaf.cache.isEnabled = app.environment.isRelease

    // Configure SQLite database
    app.databases.use(.sqlite(.file("db.sqlite")), as: .sqlite)

    // Configure migrations
    app.migrations.add(CreateTodo())
    
    app.sessions.use(.memory) //.sqlite
    
//    Fluent includes support for storing session data in your application's {{c1::database}}.
//    This section assumes you have configured Fluent and can connect to a {{c1::database}}.
//    The first step is to enable the Fluent sessions driver.
//
//    import Fluent
//    app.sessions.use(.fluent)
//
//    This will configure sessions to use the application's default {{c1::database}}.
//    To specify a specific {{c1::database}}, pass the {{c1::database's}} identifier.
//
//    app.sessions.use(.fluent(.sqlite))
//
//    Finally, add SessionRecord's migration to your {{c1::database's}} migrations. This will prepare your database for storing session data in the _fluent_sessionsschema.
//
//    app.migrations.add(SessionRecord.migration)
//
//    Make sure to run your application's migrations after adding the new migration. Sessions will now be stored in your application's {{c1::database}} allowing them to persist between restarts and be shared between multiple instances of your app.
    
    
//    //To use sessions in a route, the request must pass through SessionsMiddleware.
//    //The easiest way to achieve this is by adding this middleware globally.
//    app.middleware.use(app.sessions.middleware)
//    
//    //cfg & connect fluent to db
//    app.sessions.use(.fluent)
//    //app.sessions.use(.fluent(.sqlite))
//    app.migrations.add(SessionRecord.migration)
    

    
//    If only a subset of your routes utilize sessions, you can instead add SessionsMiddleware to a route group.
//    let sessions = app.grouped(app.sessions.middleware)
    
    
//    The HTTP cookie generated by sessions can be configured using app.sessions.configuration.
//    You can change the cookie name and declare a custom function for generating cookie values.
//
//    // Change the cookie name to "foo".
//    app.sessions.configuration.{{c1::cookieName}} = "foo"
//
//    // Configures cookie value creation.
//    app.sessions.configuration.cookieFactory = { sessionID in
//       .init(string: sessionID.string, isSecure: true)
//    }
//
//    By default, Vapor will use vapor_session as the cookie name.
    
//    Session {{c1::drivers}} are responsible for storing and retrieving session data by identifier.
//    You can create custom {{c1::drivers}} by conforming to the Session{{c1::Driver}}protocol.
//    Warning - The session {{c1::driver}} should be configured before adding app.sessions.middleware to your application.
    
//    New sessions are initialized automatically when data is added to req.session.
//    The example route handler below accepts a dynamic route parameter and adds the value to req.session.data.

//    app.get("set", ":value") { req -> HTTPStatus in
//        req.session.data["name"] = req.parameters.get("value")
//        return .ok
//    }
//    
//    app.get("set") { req -> HTTPStatus in
//        req.session.data["name"] = req.parameters.get("value")
//        return .ok
//    }
    
//    To end a session, use req.session.{{c1::destroy}}.
//    This will delete the data from the session driver and invalidate the session cookie.
//
//    app.get("del") { req -> HTTPStatus in
//        req.session.{{c1::destroy}}()
//        return .ok
//    }
    
//    Sessions allow you to persist a user's data between multiple requests.
//    Sessions work by creating and returning a unique {{c1::cookie}} alongside the HTTP response when a new session is initialized.
//    Browsers will automatically detect this {{c1::cookie}} and include it in future requests.
//    This allows Vapor to automatically restore a specific user's session in your request handler.
    
//    Use the following request to initialize a session with the name Vapor.
//
//    GET /set/vapor HTTP/1.1
//    content-length: 0
//
//    You should receive a response similar to the following:
//
//    HTTP/1.1 200 OK
//    content-length: 0
//    set-cookie: vapor-session=123; Expires=Fri, 10 Apr 2020 21:08:09 GMT; Path=/
//
//    Notice the set-cookie header has been added automatically to the response after adding data to req.session.
//    Including this cookie in subsequent requests will allow access to the session data.

    try routes(app)
}
